"""
Django settings for gov_services project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# في الإنتاج، استخدم متغيرات البيئة بدلاً من هذا
import os
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'oai(by$3xw6h+!58r6*%9whw!*d+xuy-^6siw9vr)%@v^aop^@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# للتطوير المحلي
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.50.149', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'services',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files serving
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom Security Middleware
    'services.middleware.SecurityHeadersMiddleware',
    'services.middleware.RequestLoggingMiddleware',
    'services.middleware.BlockSuspiciousIPMiddleware',
]

ROOT_URLCONF = 'gov_services.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gov_services.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# PythonAnywhere MySQL Configuration
if 'PYTHONANYWHERE_DOMAIN' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DB_NAME', ''),
            'USER': os.environ.get('DB_USER', ''),
            'PASSWORD': os.environ.get('DB_PASSWORD', ''),
            'HOST': os.environ.get('DB_HOST', ''),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / "services" / "static",
]

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ========== Cache Configuration (لـ Rate Limiting) ==========
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

# ========== إعدادات الأمان ==========

# Session Security
SESSION_COOKIE_AGE = 3600  # ساعة واحدة
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# CSRF Protection
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access if needed
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SECURE = False  # Will be set to True in production

# XSS Protection
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# إعدادات إضافية للإنتاج (فعّلها عند استخدام HTTPS)
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# Password Hashing (استخدام PBKDF2 - آمن وسريع)
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    # لتثبيت Argon2 (أقوى أماناً): pip install django[argon2]
    # 'django.contrib.auth.hashers.Argon2PasswordHasher',
]

# Logging للأحداث الأمنية
# Check if we're in production (Railway/Render/PythonAnywhere/DigitalOcean/Cloud)
IS_PRODUCTION = (
    'RAILWAY_ENVIRONMENT' in os.environ or 
    'WEBSITE_HOSTNAME' in os.environ or 
    'RENDER' in os.environ or
    'PYTHONANYWHERE_DOMAIN' in os.environ or  # PythonAnywhere
    'DIGITALOCEAN_APP_ID' in os.environ or  # DigitalOcean App Platform
    os.environ.get('DJANGO_DEBUG', 'True') == 'False'  # Explicit production flag
)

# Configure logging handlers based on environment
if IS_PRODUCTION:
    # Production: Use console logging only
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.security': {
                'handlers': ['console'],
                'level': 'WARNING',
                'propagate': False,
            },
            'services': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'security': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'requests': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
else:
    # Development: Use both console and file logging
    import os
    log_dir = BASE_DIR / 'logs'
    
    # إنشاء مجلد logs إذا لم يكن موجوداً (للتطوير المحلي فقط)
    try:
        if not log_dir.exists():
            log_dir.mkdir(parents=True, exist_ok=True)
        
        # التحقق من إمكانية الكتابة
        test_file = log_dir / '.test'
        test_file.touch()
        test_file.unlink()
        can_write_logs = True
    except (OSError, PermissionError):
        can_write_logs = False
    
    if can_write_logs:
        # Development with file logging
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                    'style': '{',
                },
                'simple': {
                    'format': '{levelname} {message}',
                    'style': '{',
                },
            },
            'handlers': {
                'console': {
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                    'formatter': 'simple'
                },
                'file': {
                    'level': 'WARNING',
                    'class': 'logging.FileHandler',
                    'filename': BASE_DIR / 'logs' / 'django.log',
                    'formatter': 'verbose',
                },
                'security_file': {
                    'level': 'WARNING',
                    'class': 'logging.FileHandler',
                    'filename': BASE_DIR / 'logs' / 'security.log',
                    'formatter': 'verbose',
                },
            },
            'loggers': {
                'django': {
                    'handlers': ['console', 'file'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'django.security': {
                    'handlers': ['security_file'],
                    'level': 'WARNING',
                    'propagate': False,
                },
                'services': {
                    'handlers': ['console', 'file'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'security': {
                    'handlers': ['console', 'security_file'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'requests': {
                    'handlers': ['console', 'file'],
                    'level': 'INFO',
                    'propagate': False,
                },
            },
        }
    else:
        # Fallback to console only if can't write files
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'simple': {
                    'format': '{levelname} {message}',
                    'style': '{',
                },
            },
            'handlers': {
                'console': {
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                    'formatter': 'simple'
                },
            },
            'loggers': {
                'django': {
                    'handlers': ['console'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'django.security': {
                    'handlers': ['console'],
                    'level': 'WARNING',
                    'propagate': False,
                },
                'services': {
                    'handlers': ['console'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'security': {
                    'handlers': ['console'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'requests': {
                    'handlers': ['console'],
                    'level': 'INFO',
                    'propagate': False,
                },
            },
        }

# ========== Email Configuration ==========
# إعدادات البريد الإلكتروني (Gmail)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_TIMEOUT = 10  # 10 seconds timeout to prevent hanging
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER', 'noreply@police.ae')

# تعطيل البريد الإلكتروني مؤقتاً في حال عدم توفر الإعدادات
if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # يطبع في Console بدلاً من الإرسال

# ========== Railway/Render/Production Configuration ==========
if IS_PRODUCTION:
    DEBUG = False
    
    # Allowed hosts - DigitalOcean App Platform
    allowed_host = (
        os.environ.get('RAILWAY_PUBLIC_DOMAIN') or 
        os.environ.get('WEBSITE_HOSTNAME') or
        os.environ.get('RENDER_EXTERNAL_HOSTNAME') or  # Render domain
        os.environ.get('DIGITALOCEAN_APP_DOMAIN') or  # DigitalOcean custom domain
        os.environ.get('APP_URL', '').replace('https://', '').replace('http://', '')  # DigitalOcean APP_URL
    )
    
    # Always allow all hosts in production for DigitalOcean
    ALLOWED_HOSTS = ['*']
    
    # CSRF Trusted Origins - مهم جداً لـ Railway/Render/DigitalOcean!
    if allowed_host:
        CSRF_TRUSTED_ORIGINS = [
            f'https://{allowed_host}',
            f'http://{allowed_host}',
        ]
    else:
        # For DigitalOcean - allow all subdomains
        CSRF_TRUSTED_ORIGINS = [
            'https://*.ondigitalocean.app',
            'https://*.digitaloceanspaces.com',
        ]
    
    # Database
    if 'DATABASE_URL' in os.environ:
        import dj_database_url
        DATABASES['default'] = dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
        )
    
    # Security - Fix for HTTPS behind proxy
    # DigitalOcean/Railway uses a proxy, tell Django to trust X-Forwarded-Proto header
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # SSL and Cookie Security
    SECURE_SSL_REDIRECT = False  # DigitalOcean handles SSL redirect
    SESSION_COOKIE_SECURE = False  # Changed to False for debugging
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_DOMAIN = None  # Let Django auto-detect
    SESSION_COOKIE_NAME = 'gov_sessionid'  # Custom session cookie name
    
    CSRF_COOKIE_SECURE = False  # Changed to False for debugging
    CSRF_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_HTTPONLY = False  # Important for AJAX CSRF handling
    CSRF_COOKIE_DOMAIN = None  # Let Django auto-detect
    CSRF_COOKIE_NAME = 'gov_csrftoken'  # Custom CSRF cookie name
    
    # HSTS (HTTP Strict Transport Security)
    SECURE_HSTS_SECONDS = 0  # Disable HSTS for now to avoid issues
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

# ========== PythonAnywhere Configuration ==========
if 'PYTHONANYWHERE_DOMAIN' in os.environ:
    DEBUG = False
    
    # Allowed hosts
    pythonanywhere_domain = os.environ.get('PYTHONANYWHERE_DOMAIN')
    if pythonanywhere_domain:
        ALLOWED_HOSTS = [pythonanywhere_domain, 'localhost', '127.0.0.1']
        
        # CSRF Trusted Origins
        CSRF_TRUSTED_ORIGINS = [
            f'https://{pythonanywhere_domain}',
            f'http://{pythonanywhere_domain}',
        ]
    
    # Static files
    STATIC_ROOT = BASE_DIR.parent / 'static'
    STATIC_URL = '/static/'
    
    # Security settings (optional for free tier, enable for paid)
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
